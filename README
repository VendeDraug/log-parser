## Parse Web Server Logs

To run the app, use the command shell to type:
`ruby parser.rb webserver.log`

To run the tests:
`rspec spec`

To rubocop:
`rubocop`

This should return first a list of number of visits for page, in a descending order,
followed by a list of unique views per page, also in descending order.

## Post-mortem

* I have decided to have an exposed class to call from the command line. I've not played around with
  ruby scripts and this was the quickest solution I went with that worked and allowed me to focus on
  the rest of the app.
* I have separated the roles between the logs being parsed and being presented
* I have originally written a test to check that log_presenter would return the formatted logs, and had
  therefore coupled the LogPresenter to the LogParser. I have amended the test and rectified the classes.

## Given more time

* I would clean up and rename the confusingly redundant Parser.rb
* I would investigate whether I can use rspec to test Parser.rb
* I would find a cleaner way to test without block strings (maybe fixtures?)
* I would not make the assumption that the logs given have the right format and return if they do not

## Original TODO
* Create app class that calls parser
* Create parser class to parse log and call presenter
* Create presenter class to return presented logs
* Account for lack of logs
* Account for multiple logs
* Account for wrong file format